version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: pwr-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pwrfinancas
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pwr-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: pwr-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Create bucket on startup
  createbuckets:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/pwr-financas --ignore-existing;
      /usr/bin/mc anonymous set public myminio/pwr-financas;
      exit 0;
      "

  # Backend API (NestJS)
  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    container_name: pwr-api
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/pwrfinancas?schema=public"
      JWT_SECRET: "change-this-to-a-secure-random-string-in-production"
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
      MINIO_ENDPOINT: "minio"
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadmin"
      MINIO_BUCKET: "pwr-financas"
      MINIO_USE_SSL: "false"
      PORT: 4000
      NODE_ENV: "development"
      FRONTEND_URL: "http://localhost:3000"
    ports:
      - '4000:4000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  # Frontend Web (Next.js)
  web:
    build:
      context: ..
      dockerfile: apps/web/Dockerfile
    container_name: pwr-web
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:4000"
    ports:
      - '3000:3000'
    depends_on:
      - api

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
